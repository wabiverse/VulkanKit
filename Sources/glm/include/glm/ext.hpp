/// @file glm/ext.hpp
///
/// @ref core (Dependence)

#include "glm/detail/setup.hpp"

#pragma once

#include "glm/glm.hpp"

#if GLM_MESSAGES == GLM_ENABLE && !defined(GLM_MESSAGE_EXT_INCLUDED_DISPLAYED)
#define GLM_MESSAGE_EXT_INCLUDED_DISPLAYED
#pragma message("GLM: All extensions included (not recommended)")
#endif // GLM_MESSAGES

#include "glm/ext/matrix_clip_space.hpp"
#include "glm/ext/matrix_common.hpp"

#include "glm/ext/matrix_double2x2.hpp"
#include "glm/ext/matrix_double2x2_precision.hpp"
#include "glm/ext/matrix_double2x3.hpp"
#include "glm/ext/matrix_double2x3_precision.hpp"
#include "glm/ext/matrix_double2x4.hpp"
#include "glm/ext/matrix_double2x4_precision.hpp"
#include "glm/ext/matrix_double3x2.hpp"
#include "glm/ext/matrix_double3x2_precision.hpp"
#include "glm/ext/matrix_double3x3.hpp"
#include "glm/ext/matrix_double3x3_precision.hpp"
#include "glm/ext/matrix_double3x4.hpp"
#include "glm/ext/matrix_double3x4_precision.hpp"
#include "glm/ext/matrix_double4x2.hpp"
#include "glm/ext/matrix_double4x2_precision.hpp"
#include "glm/ext/matrix_double4x3.hpp"
#include "glm/ext/matrix_double4x3_precision.hpp"
#include "glm/ext/matrix_double4x4.hpp"
#include "glm/ext/matrix_double4x4_precision.hpp"

#include "glm/ext/matrix_float2x2.hpp"
#include "glm/ext/matrix_float2x2_precision.hpp"
#include "glm/ext/matrix_float2x3.hpp"
#include "glm/ext/matrix_float2x3_precision.hpp"
#include "glm/ext/matrix_float2x4.hpp"
#include "glm/ext/matrix_float2x4_precision.hpp"
#include "glm/ext/matrix_float3x2.hpp"
#include "glm/ext/matrix_float3x2_precision.hpp"
#include "glm/ext/matrix_float3x3.hpp"
#include "glm/ext/matrix_float3x3_precision.hpp"
#include "glm/ext/matrix_float3x4.hpp"
#include "glm/ext/matrix_float3x4_precision.hpp"
#include "glm/ext/matrix_float4x2.hpp"
#include "glm/ext/matrix_float4x2_precision.hpp"
#include "glm/ext/matrix_float4x3.hpp"
#include "glm/ext/matrix_float4x3_precision.hpp"
#include "glm/ext/matrix_float4x4.hpp"
#include "glm/ext/matrix_float4x4_precision.hpp"

#include "glm/ext/matrix_int2x2.hpp"
#include "glm/ext/matrix_int2x2_sized.hpp"
#include "glm/ext/matrix_int2x3.hpp"
#include "glm/ext/matrix_int2x3_sized.hpp"
#include "glm/ext/matrix_int2x4.hpp"
#include "glm/ext/matrix_int2x4_sized.hpp"
#include "glm/ext/matrix_int3x2.hpp"
#include "glm/ext/matrix_int3x2_sized.hpp"
#include "glm/ext/matrix_int3x3.hpp"
#include "glm/ext/matrix_int3x3_sized.hpp"
#include "glm/ext/matrix_int3x4.hpp"
#include "glm/ext/matrix_int3x4_sized.hpp"
#include "glm/ext/matrix_int4x2.hpp"
#include "glm/ext/matrix_int4x2_sized.hpp"
#include "glm/ext/matrix_int4x3.hpp"
#include "glm/ext/matrix_int4x3_sized.hpp"
#include "glm/ext/matrix_int4x4.hpp"
#include "glm/ext/matrix_int4x4_sized.hpp"

#include "glm/ext/matrix_uint2x2.hpp"
#include "glm/ext/matrix_uint2x2_sized.hpp"
#include "glm/ext/matrix_uint2x3.hpp"
#include "glm/ext/matrix_uint2x3_sized.hpp"
#include "glm/ext/matrix_uint2x4.hpp"
#include "glm/ext/matrix_uint2x4_sized.hpp"
#include "glm/ext/matrix_uint3x2.hpp"
#include "glm/ext/matrix_uint3x2_sized.hpp"
#include "glm/ext/matrix_uint3x3.hpp"
#include "glm/ext/matrix_uint3x3_sized.hpp"
#include "glm/ext/matrix_uint3x4.hpp"
#include "glm/ext/matrix_uint3x4_sized.hpp"
#include "glm/ext/matrix_uint4x2.hpp"
#include "glm/ext/matrix_uint4x2_sized.hpp"
#include "glm/ext/matrix_uint4x3.hpp"
#include "glm/ext/matrix_uint4x3_sized.hpp"
#include "glm/ext/matrix_uint4x4.hpp"
#include "glm/ext/matrix_uint4x4_sized.hpp"

#include "glm/ext/matrix_projection.hpp"
#include "glm/ext/matrix_relational.hpp"
#include "glm/ext/matrix_transform.hpp"

#include "glm/ext/quaternion_common.hpp"
#include "glm/ext/quaternion_double.hpp"
#include "glm/ext/quaternion_double_precision.hpp"
#include "glm/ext/quaternion_float.hpp"
#include "glm/ext/quaternion_float_precision.hpp"
#include "glm/ext/quaternion_exponential.hpp"
#include "glm/ext/quaternion_geometric.hpp"
#include "glm/ext/quaternion_relational.hpp"
#include "glm/ext/quaternion_transform.hpp"
#include "glm/ext/quaternion_trigonometric.hpp"

#include "glm/ext/scalar_common.hpp"
#include "glm/ext/scalar_constants.hpp"
#include "glm/ext/scalar_integer.hpp"
#include "glm/ext/scalar_packing.hpp"
#include "glm/ext/scalar_reciprocal.hpp"
#include "glm/ext/scalar_relational.hpp"
#include "glm/ext/scalar_ulp.hpp"

#include "glm/ext/scalar_int_sized.hpp"
#include "glm/ext/scalar_uint_sized.hpp"

#include "glm/ext/vector_common.hpp"
#include "glm/ext/vector_integer.hpp"
#include "glm/ext/vector_packing.hpp"
#include "glm/ext/vector_reciprocal.hpp"
#include "glm/ext/vector_relational.hpp"
#include "glm/ext/vector_ulp.hpp"

#include "glm/ext/vector_bool1.hpp"
#include "glm/ext/vector_bool1_precision.hpp"
#include "glm/ext/vector_bool2.hpp"
#include "glm/ext/vector_bool2_precision.hpp"
#include "glm/ext/vector_bool3.hpp"
#include "glm/ext/vector_bool3_precision.hpp"
#include "glm/ext/vector_bool4.hpp"
#include "glm/ext/vector_bool4_precision.hpp"

#include "glm/ext/vector_double1.hpp"
#include "glm/ext/vector_double1_precision.hpp"
#include "glm/ext/vector_double2.hpp"
#include "glm/ext/vector_double2_precision.hpp"
#include "glm/ext/vector_double3.hpp"
#include "glm/ext/vector_double3_precision.hpp"
#include "glm/ext/vector_double4.hpp"
#include "glm/ext/vector_double4_precision.hpp"

#include "glm/ext/vector_float1.hpp"
#include "glm/ext/vector_float1_precision.hpp"
#include "glm/ext/vector_float2.hpp"
#include "glm/ext/vector_float2_precision.hpp"
#include "glm/ext/vector_float3.hpp"
#include "glm/ext/vector_float3_precision.hpp"
#include "glm/ext/vector_float4.hpp"
#include "glm/ext/vector_float4_precision.hpp"

#include "glm/ext/vector_int1.hpp"
#include "glm/ext/vector_int1_sized.hpp"
#include "glm/ext/vector_int2.hpp"
#include "glm/ext/vector_int2_sized.hpp"
#include "glm/ext/vector_int3.hpp"
#include "glm/ext/vector_int3_sized.hpp"
#include "glm/ext/vector_int4.hpp"
#include "glm/ext/vector_int4_sized.hpp"

#include "glm/ext/vector_uint1.hpp"
#include "glm/ext/vector_uint1_sized.hpp"
#include "glm/ext/vector_uint2.hpp"
#include "glm/ext/vector_uint2_sized.hpp"
#include "glm/ext/vector_uint3.hpp"
#include "glm/ext/vector_uint3_sized.hpp"
#include "glm/ext/vector_uint4.hpp"
#include "glm/ext/vector_uint4_sized.hpp"

#include "glm/gtc/bitfield.hpp"
#include "glm/gtc/color_space.hpp"
#include "glm/gtc/constants.hpp"
#include "glm/gtc/epsilon.hpp"
#include "glm/gtc/integer.hpp"
#include "glm/gtc/matrix_access.hpp"
#include "glm/gtc/matrix_integer.hpp"
#include "glm/gtc/matrix_inverse.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "glm/gtc/noise.hpp"
#include "glm/gtc/packing.hpp"
#include "glm/gtc/quaternion.hpp"
#include "glm/gtc/random.hpp"
#include "glm/gtc/reciprocal.hpp"
#include "glm/gtc/round.hpp"
#include "glm/gtc/type_precision.hpp"
#include "glm/gtc/type_ptr.hpp"
#include "glm/gtc/ulp.hpp"
#include "glm/gtc/vec1.hpp"
#if GLM_CONFIG_ALIGNED_GENTYPES == GLM_ENABLE
#include "glm/gtc/type_aligned.hpp"
#endif

#ifdef GLM_ENABLE_EXPERIMENTAL
#include "glm/gtx/associated_min_max.hpp"
#include "glm/gtx/bit.hpp"
#include "glm/gtx/closest_point.hpp"
#include "glm/gtx/color_encoding.hpp"
#include "glm/gtx/color_space.hpp"
#include "glm/gtx/color_space_YCoCg.hpp"
#include "glm/gtx/common.hpp"
#include "glm/gtx/compatibility.hpp"
#include "glm/gtx/component_wise.hpp"
#include "glm/gtx/dual_quaternion.hpp"
#include "glm/gtx/easing.hpp"
#include "glm/gtx/euler_angles.hpp"
#include "glm/gtx/extend.hpp"
#include "glm/gtx/extended_min_max.hpp"
#include "glm/gtx/fast_exponential.hpp"
#include "glm/gtx/fast_square_root.hpp"
#include "glm/gtx/fast_trigonometry.hpp"
#include "glm/gtx/functions.hpp"
#include "glm/gtx/gradient_paint.hpp"
#include "glm/gtx/handed_coordinate_space.hpp"

#if __cplusplus >= 201103L
#include "glm/gtx/hash.hpp"
#endif

#include "glm/gtx/integer.hpp"
#include "glm/gtx/intersect.hpp"
#include "glm/gtx/io.hpp"
#include "glm/gtx/log_base.hpp"
#include "glm/gtx/matrix_cross_product.hpp"
#include "glm/gtx/matrix_decompose.hpp"
#include "glm/gtx/matrix_factorisation.hpp"
#include "glm/gtx/matrix_interpolation.hpp"
#include "glm/gtx/matrix_major_storage.hpp"
#include "glm/gtx/matrix_operation.hpp"
#include "glm/gtx/matrix_query.hpp"
#include "glm/gtx/mixed_product.hpp"
#include "glm/gtx/norm.hpp"
#include "glm/gtx/normal.hpp"
#include "glm/gtx/normalize_dot.hpp"
#include "glm/gtx/number_precision.hpp"
#include "glm/gtx/optimum_pow.hpp"
#include "glm/gtx/orthonormalize.hpp"
#include "glm/gtx/pca.hpp"
#include "glm/gtx/perpendicular.hpp"
#include "glm/gtx/polar_coordinates.hpp"
#include "glm/gtx/projection.hpp"
#include "glm/gtx/quaternion.hpp"
#include "glm/gtx/raw_data.hpp"
#include "glm/gtx/rotate_normalized_axis.hpp"
#include "glm/gtx/rotate_vector.hpp"
#include "glm/gtx/spline.hpp"
#include "glm/gtx/std_based_type.hpp"
#if !((GLM_COMPILER & GLM_COMPILER_CUDA) || (GLM_COMPILER & GLM_COMPILER_HIP))
#include "glm/gtx/string_cast.hpp"
#endif
#include "glm/gtx/transform.hpp"
#include "glm/gtx/transform2.hpp"
#include "glm/gtx/vec_swizzle.hpp"
#include "glm/gtx/vector_angle.hpp"
#include "glm/gtx/vector_query.hpp"
#include "glm/gtx/wrap.hpp"

#if GLM_HAS_TEMPLATE_ALIASES
#include "glm/gtx/scalar_multiplication.hpp"
#endif

#if GLM_HAS_RANGE_FOR
#include "glm/gtx/range.hpp"
#endif
#endif // GLM_ENABLE_EXPERIMENTAL
